import FIFO::*;
import FIFOF::*;
import Clocks::*;
import Vector::*;

import ScatterN::*;

import SortingNetwork::*;


interface VectorMergerIfc#(numeric type vcnt, type inType, numeric type cntSz);
	method Action enq1(Vector#(vcnt,inType) data);
	method Action enq2(Vector#(vcnt,inType) data);
	method Action runMerge(Bit#(cntSz) count);
	method ActionValue#(Vector#(vcnt,inType)) get;
endinterface

module mkVectorMerger__#(Bool descending) (VectorMergerIfc#(vcnt, inType, cntSz))
	provisos(Bits#(inType,inTypeSz), Ord#(inType), Add#(1,a__,inTypeSz));

	BitonicSorterIfc#(vcnt, inType) bsort <- mkBitonicSorter(descending);
	
	Reg#(Bit#(cntSz)) mCountTotal <- mkReg(0);
	Reg#(Bit#(cntSz)) mCount1 <- mkReg(0);
	Reg#(Bit#(cntSz)) mCount2 <- mkReg(0);

	FIFO#(Vector#(vcnt,inType)) inQ1 <- mkFIFO;
	FIFO#(Vector#(vcnt,inType)) inQ2 <- mkFIFO;
	FIFO#(Vector#(vcnt,inType)) outQ <- mkFIFO;

	Reg#(Vector#(vcnt,inType)) abuf <- mkReg(?);
	FIFO#(Tuple2#(Bool,Vector#(vcnt,inType))) cmpQ <- mkFIFO;
	Reg#(Bool) append1 <- mkReg(False);
	
	rule ffa (mCount1 == 0 && mCount2 == 0 && mCountTotal > 0);
		//abuf <= tagged Invalid;
		outQ.enq(abuf);
		mCountTotal <= 0;
	endrule
	
	rule ff1 (mCount1 > 0 && mCount2 == 0 );
		let db = abuf;
		let dq = inQ1.first;
		let cleaned = halfClean(db,dq,descending);
		inQ1.deq;
	
		let top = tpl_1(cleaned);
		let bot = tpl_2(cleaned);
		//abuf <= sortBitonic(bot,descending);
		abuf <= bsort.sort(bot);

		outQ.enq(top);
		mCountTotal <= mCountTotal - 1;
		mCount1 <= mCount1 - 1;
		//$display( "1! %d %d == %d", mCount1, mCount2, mCountTotal );
	endrule
	rule ff2 (mCount1 == 0 && mCount2 > 0);
		let db = abuf;
		let dq = inQ2.first;
		let cleaned = halfClean(db,dq,descending);
		inQ2.deq;
	
		let top = tpl_1(cleaned);
		let bot = tpl_2(cleaned);
		//abuf <= sortBitonic(bot,descending);
		abuf <= bsort.sort(bot);

		outQ.enq(top);
		mCountTotal <= mCountTotal - 1;
		mCount2 <= mCount2 - 1;
		//$display( "2! %d %d == %d", mCount1, mCount2, mCountTotal );
	endrule
	
	
	
	rule doMerge (mCount1 > 0 && mCount2 > 0);
		Integer count = valueOf(vcnt);

		Vector#(vcnt,inType) dq;
		if ( append1 == True ) begin
			dq = inQ1.first;
			inQ1.deq;
			mCount1 <= mCount1 - 1;
		end else begin
			dq = inQ2.first;
			inQ2.deq;
			mCount2 <= mCount2 - 1;
		end
		let db = abuf;

		let tailq = dq[count-1];
		let tailb = db[count-1];

		let cleaned = halfClean(dq,db,descending);

		let top = tpl_1(cleaned);
		let bot = tpl_2(cleaned);

		//abuf <= sortBitonic(bot, descending);
		abuf <= bsort.sort(bot);

		if ( descending ) begin
			if ( tailq < tailb ) begin
				//change source q
				append1 <= !append1;
			end else begin
			end
		end else begin
			if ( tailq > tailb ) begin
				//change source q
				append1 <= !append1;
			end else begin
			end
		end
		mCountTotal <= mCountTotal - 1;

		//TODO outQ must be pushed through a sorting network
		outQ.enq(top);
		//$display( "%d %d == %d", mCount1, mCount2, mCountTotal );
	endrule

	FIFO#(Bit#(cntSz)) runCmdQ <- mkFIFO;

	rule applyRunCmd ( mCountTotal == 0 );
		Integer count = valueOf(vcnt);

		let mcount = runCmdQ.first;
		runCmdQ.deq;

		let d1 = inQ1.first;
		let d2 = inQ2.first;
		inQ1.deq;
		inQ2.deq;

		let cleaned = halfClean(d1,d2,descending);
		let top = tpl_1(cleaned);
		let bot = tpl_2(cleaned);
		outQ.enq(top);
		//abuf <= sortBitonic(bot,descending);
		abuf <= bsort.sort(bot);

		let tail1 = d1[count-1];
		let tail2 = d2[count-1];
		if ( descending ) begin
			if ( tail1 >= tail2 ) begin
				append1 <= True;
			end else begin
				append1 <= False;
			end
		end else begin
			if ( tail2 >= tail1 ) begin
				append1 <= True;
			end else begin
				append1 <= False;
			end
		end
		mCountTotal <= (mcount<<1)-1;
		mCount1 <= mcount - 1;
		mCount2 <= mcount - 1;

		//$display ( "Starting command %d", mcount );
	endrule

	method Action enq1(Vector#(vcnt,inType) data);
		inQ1.enq(data);
	endmethod
	method Action enq2(Vector#(vcnt,inType) data);
		inQ2.enq(data);
	endmethod
	method Action runMerge(Bit#(cntSz) count); 
		runCmdQ.enq(count);
	endmethod
	method ActionValue#(Vector#(vcnt,inType)) get;
		outQ.deq;
		return outQ.first;
	endmethod
endmodule

module mkVectorMerger_#(Bool descending) (VectorMergerIfc#(vcnt, inType, cntSz))
	provisos(Bits#(inType,inTypeSz), Ord#(inType), Add#(1,a__,inTypeSz));
	
	Reg#(Bit#(cntSz)) mCountTotal <- mkReg(0);
	Reg#(Bit#(cntSz)) mCount1 <- mkReg(0);
	Reg#(Bit#(cntSz)) mCount2 <- mkReg(0);

	FIFO#(Vector#(vcnt,inType)) inQ1 <- mkFIFO;
	FIFO#(Vector#(vcnt,inType)) inQ2 <- mkFIFO;
	FIFO#(Vector#(vcnt,inType)) outQ <- mkFIFO;

	Reg#(Vector#(vcnt,inType)) abuf <- mkReg(?);
	Reg#(Maybe#(Bool)) append1 <- mkReg(tagged Invalid);
	Reg#(inType) atail <- mkReg(?);
	
	rule ff1 (mCount1 > 0 && mCount2 == 0);
		
		if ( isValid(append1) ) begin
			append1 <= tagged Invalid;
			outQ.enq(abuf);
		end else begin
			inQ1.deq;
			outQ.enq(inQ1.first);
		end
		mCountTotal <= mCountTotal - 1;
		mCount1 <= mCount1 - 1;
	endrule
	rule ff2 (mCount1 == 0 && mCount2 > 0);
		
		if ( isValid(append1) ) begin
			append1 <= tagged Invalid;
			outQ.enq(abuf);
		end else begin
			inQ2.deq;
			outQ.enq(inQ2.first);
		end
		mCountTotal <= mCountTotal - 1;
		mCount2 <= mCount2 - 1;
	endrule

	Reg#(Vector#(vcnt,inType)) topReg <- mkReg(?);
	Reg#(Vector#(vcnt,inType)) botReg <- mkReg(?);
	Reg#(inType) tailReg1 <- mkReg(?);
	Reg#(inType) tailReg2 <- mkReg(?);
	Reg#(Bit#(1)) mergestate <- mkReg(0);

	rule doMerge (mCount1 > 0 && mCount2 > 0 && mergestate == 0 );
		Integer count = valueOf(vcnt);

		let d1 = inQ1.first;
		let d2 = inQ2.first;
		
		let tail1 = d1[count-1];
		let tail2 = d2[count-1];
		if ( isValid(append1) ) begin
			let is1 = fromMaybe(?, append1);
			if ( is1 ) begin
				d1 = abuf;
				tail1 = atail;
				inQ2.deq;
			end else begin
				d2 = abuf;
				tail2 = atail;
				inQ1.deq;
			end
		end else begin
			inQ1.deq;
			inQ2.deq;
		end


		let cleaned = halfClean(d1,d2,descending);

		topReg <= tpl_1(cleaned);
		botReg <= tpl_2(cleaned);
		tailReg1 <= tail1;
		tailReg2 <= tail2;
		mergestate <= 1;
	endrule

	rule domerge2(mergestate == 1);
		// FIXME I don't think sortBitonic is needed?
		// (half cleaners only need bitonic seq)
		// in that case, we don't need two stages to merge
		abuf <= sortBitonic(botReg, descending); 
		let tail1 = tailReg1;
		let tail2 = tailReg2;

		if ( descending ) begin
			if ( tail1 >= tail2 ) begin
				append1 <= tagged Valid False;
				atail <= tail2;
				mCount1 <= mCount1 - 1;
			end else begin
				append1 <= tagged Valid True;
				atail <= tail1;
				mCount2 <= mCount2 - 1;
			end
		end else begin
			if ( tail2 >= tail1 ) begin
				append1 <= tagged Valid False;
				atail <= tail2;
				mCount1 <= mCount1 - 1;
			end else begin
				append1 <= tagged Valid True;
				atail <= tail1;
				mCount2 <= mCount2 - 1;
			end
		end
		mCountTotal <= mCountTotal - 1;

		//TODO outQ must be pushed through a sorting network
		outQ.enq(topReg);
		mergestate <= 0;
	endrule


	method Action enq1(Vector#(vcnt,inType) data);
		inQ1.enq(data);
	endmethod
	method Action enq2(Vector#(vcnt,inType) data);
		inQ2.enq(data);
	endmethod
	method Action runMerge(Bit#(cntSz) count) if ( mCountTotal == 0);
		mCountTotal <= count * 2;
		mCount1 <= count;
		mCount2 <= count;
	endmethod
	method ActionValue#(Vector#(vcnt,inType)) get;
		outQ.deq;
		return outQ.first;
	endmethod
endmodule

module mkVectorMerger#(Bool descending) (VectorMergerIfc#(vcnt, inType, cntSz))
	provisos(Bits#(inType,inTypeSz), Ord#(inType), Add#(1,a__,inTypeSz));
	
	Reg#(Bit#(cntSz)) mCountTotal <- mkReg(0);
	Reg#(Bit#(cntSz)) mCount1 <- mkReg(0);
	Reg#(Bit#(cntSz)) mCount2 <- mkReg(0);

	FIFO#(Vector#(vcnt,inType)) inQ1 <- mkFIFO;
	FIFO#(Vector#(vcnt,inType)) inQ2 <- mkFIFO;
	FIFO#(Vector#(vcnt,inType)) outQ <- mkFIFO;

	Reg#(Vector#(vcnt,inType)) abuf <- mkReg(?);
	Reg#(Maybe#(Bool)) append1 <- mkReg(tagged Invalid);
	Reg#(inType) atail <- mkReg(?);
	
	rule ff1 (mCount1 > 0 && mCount2 == 0);
		
		if ( isValid(append1) ) begin
			append1 <= tagged Invalid;
			outQ.enq(abuf);
		end else begin
			inQ1.deq;
			outQ.enq(inQ1.first);
		end
		mCountTotal <= mCountTotal - 1;
		mCount1 <= mCount1 - 1;
	endrule
	rule ff2 (mCount1 == 0 && mCount2 > 0);
		
		if ( isValid(append1) ) begin
			append1 <= tagged Invalid;
			outQ.enq(abuf);
		end else begin
			inQ2.deq;
			outQ.enq(inQ2.first);
		end
		mCountTotal <= mCountTotal - 1;
		mCount2 <= mCount2 - 1;
	endrule

	//Reg#(Vector#(vcnt,inType)) topReg <- mkReg(?);
	//Reg#(Vector#(vcnt,inType)) botReg <- mkReg(?);
	Reg#(inType) tailReg1 <- mkReg(?);
	Reg#(inType) tailReg2 <- mkReg(?);
	Reg#(Bit#(1)) mergestate <- mkReg(0);

	rule doMerge (mCount1 > 0 && mCount2 > 0 ); // && mergestate == 0 );
		Integer count = valueOf(vcnt);

		let d1 = inQ1.first;
		let d2 = inQ2.first;
		
		let tail1 = d1[count-1];
		let tail2 = d2[count-1];
		if ( isValid(append1) ) begin
			let is1 = fromMaybe(?, append1);
			if ( is1 ) begin
				d1 = abuf;
				tail1 = atail;
				inQ2.deq;
			end else begin
				d2 = abuf;
				tail2 = atail;
				inQ1.deq;
			end
		end else begin
			inQ1.deq;
			inQ2.deq;
		end


		let cleaned = halfClean(d1,d2,descending);

		let top <= tpl_1(cleaned);
		let bot <= tpl_2(cleaned);
		//tailReg1 <= tail1;
		//tailReg2 <= tail2;
		//mergestate <= 1;

		// I don't think sortBitonic is needed?
		// (half cleaners only need bitonic seq)
		// in that case, we don't need two stages to merge
		//abuf <= sortBitonic(botReg, descending); 
		abuf <= bot; 
		//let tail1 = tailReg1;
		//let tail2 = tailReg2;

		if ( descending ) begin
			if ( tail1 >= tail2 ) begin
				append1 <= tagged Valid False;
				atail <= tail2;
				mCount1 <= mCount1 - 1;
			end else begin
				append1 <= tagged Valid True;
				atail <= tail1;
				mCount2 <= mCount2 - 1;
			end
		end else begin
			if ( tail2 >= tail1 ) begin
				append1 <= tagged Valid False;
				atail <= tail2;
				mCount1 <= mCount1 - 1;
			end else begin
				append1 <= tagged Valid True;
				atail <= tail1;
				mCount2 <= mCount2 - 1;
			end
		end
		mCountTotal <= mCountTotal - 1;

		//TODO outQ must be pushed through a sorting network
		//it is only bitonic!
		outQ.enq(top);
		//mergestate <= 0;
	endrule


	//TODO input MUST be sorted!
	method Action enq1(Vector#(vcnt,inType) data);
		inQ1.enq(data);
	endmethod
	method Action enq2(Vector#(vcnt,inType) data);
		inQ2.enq(data);
	endmethod

	method Action runMerge(Bit#(cntSz) count) if ( mCountTotal == 0);
		mCountTotal <= count * 2;
		mCount1 <= count;
		mCount2 <= count;
	endmethod

	//TODO outQ must be pushed through a sorting network
	//it is only bitonic!
	method ActionValue#(Vector#(vcnt,inType)) get;
		outQ.deq;
		return outQ.first;
	endmethod
endmodule

interface MergeSorterEpIfc#(numeric type vcnt, type inType);
	method Action enq(Vector#(vcnt, inType) data);
endinterface

interface MergeSorterIfc#(numeric type inCnt, numeric type vcnt, type inType);
	interface Vector#(inCnt, MergeSorterEpIfc#(vcnt, inType)) enq;
	method Action runMerge(Bit#(42) count);
	method ActionValue#(inType) get;
endinterface

module mkMergeSorter16#(Bool descending) (MergeSorterIfc#(16, vcnt, inType));


	Vector#(8, VectorMergerIfc#(vcnt, inType, 42)) merge0 <- replicateM(mkVectorMerger(descending));
	Vector#(4, VectorMergerIfc#(vcnt, inType, 42)) merge1 <- replicateM(mkVectorMerger(descending));
	Vector#(2, VectorMergerIfc#(vcnt, inType, 42)) merge2 <- replicateM(mkVectorMerger(descending));
	VectorMergerIfc#(vcnt, inType, 42) merge3 <- mkVectorMerger(descending);


	Vector#(16, MergeSorterEpIfc#(vcnt, inType)) enq_;
	for ( Integer i = 0; i < 16; i=i+1 ) begin
		enq_[i] = interface MergeSorterEpIfc;
			method Action enq(Vector#(vcnt, inType) data);
			endmethod
		endinterface
	end

	interface enq = enq_;
	method Action runMerge(Bit#(42) count);
	endmethod
	method ActionValue#(inType) get;
		return ?;
	endmethod

endmodule

